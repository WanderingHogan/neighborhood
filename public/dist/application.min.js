"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mean",applicationModuleVendorDependencies=["ngResource","ngAnimate","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("emergencies"),ApplicationConfiguration.registerModule("environments"),ApplicationConfiguration.registerModule("people"),ApplicationConfiguration.registerModule("places"),ApplicationConfiguration.registerModule("transporations"),ApplicationConfiguration.registerModule("users"),angular.module("places").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Places","places","/places(/create)?"),Menus.addMenuItem("topbar","People","people","/people(/create)?"),Menus.addMenuItem("topbar","Environment","environments","/environments(/create)?"),Menus.addMenuItem("topbar","Emergency","emergencies","/emergencies(/create)?"),Menus.addMenuItem("topbar","Transporation","transporations","/transporations(/create)?")}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication,angular.extend($scope,{center:{lat:40.095,lng:-3.823,zoom:4},defaults:{scrollWheelZoom:!1}})}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("emergencies").config(["$stateProvider",function($stateProvider){$stateProvider.state("listEmergencies",{url:"/emergencies",templateUrl:"modules/emergencies/views/list-emergencies.client.view.html"}).state("createEmergency",{url:"/emergencies/create",templateUrl:"modules/emergencies/views/create-emergency.client.view.html"}).state("viewEmergency",{url:"/emergencies/:emergencyId",templateUrl:"modules/emergencies/views/view-emergency.client.view.html"}).state("editEmergency",{url:"/emergencies/:emergencyId/edit",templateUrl:"modules/emergencies/views/edit-emergency.client.view.html"})}]),angular.module("emergencies").controller("EmergenciesController",["$scope","$stateParams","$location","Authentication","Emergencies",function($scope,$stateParams,$location,Authentication,Emergencies){$scope.authentication=Authentication,$scope.create=function(){var emergency=new Emergencies({name:this.name});emergency.$save(function(response){$location.path("emergencies/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(emergency){if(emergency){emergency.$remove();for(var i in $scope.emergencies)$scope.emergencies[i]===emergency&&$scope.emergencies.splice(i,1)}else $scope.emergency.$remove(function(){$location.path("emergencies")})},$scope.update=function(){var emergency=$scope.emergency;emergency.$update(function(){$location.path("emergencies/"+emergency._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.emergencies=Emergencies.query()},$scope.findOne=function(){$scope.emergency=Emergencies.get({emergencyId:$stateParams.emergencyId})}}]),angular.module("emergencies").factory("Emergencies",["$resource",function($resource){return $resource("emergencies/:emergencyId",{emergencyId:"@_id"},{update:{method:"PUT"}})}]),angular.module("environments").config(["$stateProvider",function($stateProvider){$stateProvider.state("listEnvironments",{url:"/environments",templateUrl:"modules/environments/views/list-environments.client.view.html"}).state("createEnvironment",{url:"/environments/create",templateUrl:"modules/environments/views/create-environment.client.view.html"}).state("viewEnvironment",{url:"/environments/:environmentId",templateUrl:"modules/environments/views/view-environment.client.view.html"}).state("editEnvironment",{url:"/environments/:environmentId/edit",templateUrl:"modules/environments/views/edit-environment.client.view.html"})}]),angular.module("environments").controller("EnvironmentsController",["$scope","$stateParams","$location","Authentication","Environments",function($scope,$stateParams,$location,Authentication,Environments){$scope.authentication=Authentication,$scope.create=function(){var environment=new Environments({name:this.name});environment.$save(function(response){$location.path("environments/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(environment){if(environment){environment.$remove();for(var i in $scope.environments)$scope.environments[i]===environment&&$scope.environments.splice(i,1)}else $scope.environment.$remove(function(){$location.path("environments")})},$scope.update=function(){var environment=$scope.environment;environment.$update(function(){$location.path("environments/"+environment._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.environments=Environments.query()},$scope.findOne=function(){$scope.environment=Environments.get({environmentId:$stateParams.environmentId})}}]),angular.module("environments").factory("Environments",["$resource",function($resource){return $resource("environments/:environmentId",{environmentId:"@_id"},{update:{method:"PUT"}})}]),angular.module("people").config(["$stateProvider",function($stateProvider){$stateProvider.state("listPeople",{url:"/people",templateUrl:"modules/people/views/list-people.client.view.html"}).state("createPerson",{url:"/people/create",templateUrl:"modules/people/views/create-person.client.view.html"}).state("viewPerson",{url:"/people/:personId",templateUrl:"modules/people/views/view-person.client.view.html"}).state("editPerson",{url:"/people/:personId/edit",templateUrl:"modules/people/views/edit-person.client.view.html"})}]),angular.module("people").controller("PeopleController",["$scope","$stateParams","$location","Authentication","People",function($scope,$stateParams,$location,Authentication,People){$scope.authentication=Authentication,$scope.create=function(){var person=new People({name:this.name});person.$save(function(response){$location.path("people/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(person){if(person){person.$remove();for(var i in $scope.people)$scope.people[i]===person&&$scope.people.splice(i,1)}else $scope.person.$remove(function(){$location.path("people")})},$scope.update=function(){var person=$scope.person;person.$update(function(){$location.path("people/"+person._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.people=People.query()},$scope.findOne=function(){$scope.person=People.get({personId:$stateParams.personId})}}]),angular.module("people").factory("People",["$resource",function($resource){return $resource("people/:personId",{personId:"@_id"},{update:{method:"PUT"}})}]),angular.module("places").config(["$stateProvider",function($stateProvider){$stateProvider.state("listPlaces",{url:"/places",templateUrl:"modules/places/views/list-places.client.view.html"}).state("createPlace",{url:"/places/create",templateUrl:"modules/places/views/create-place.client.view.html"}).state("viewPlace",{url:"/places/:placeId",templateUrl:"modules/places/views/view-place.client.view.html"}).state("editPlace",{url:"/places/:placeId/edit",templateUrl:"modules/places/views/edit-place.client.view.html"})}]),angular.module("places").controller("PlacesController",["$scope","$stateParams","$location","Authentication","Places",function($scope,$stateParams,$location,Authentication,Places){$scope.authentication=Authentication,$scope.create=function(){var place=new Places({name:this.name});place.$save(function(response){$location.path("places/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(place){if(place){place.$remove();for(var i in $scope.places)$scope.places[i]===place&&$scope.places.splice(i,1)}else $scope.place.$remove(function(){$location.path("places")})},$scope.update=function(){var place=$scope.place;place.$update(function(){$location.path("places/"+place._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.places=Places.query()},$scope.findOne=function(){$scope.place=Places.get({placeId:$stateParams.placeId})}}]),angular.module("places").factory("Places",["$resource",function($resource){return $resource("places/:placeId",{placeId:"@_id"},{update:{method:"PUT"}})}]),angular.module("transporations").config(["$stateProvider",function($stateProvider){$stateProvider.state("listTransporations",{url:"/transporations",templateUrl:"modules/transporations/views/list-transporations.client.view.html"}).state("createTransporation",{url:"/transporations/create",templateUrl:"modules/transporations/views/create-transporation.client.view.html"}).state("viewTransporation",{url:"/transporations/:transporationId",templateUrl:"modules/transporations/views/view-transporation.client.view.html"}).state("editTransporation",{url:"/transporations/:transporationId/edit",templateUrl:"modules/transporations/views/edit-transporation.client.view.html"})}]),angular.module("transporations").controller("TransporationsController",["$scope","$stateParams","$location","Authentication","Transporations",function($scope,$stateParams,$location,Authentication,Transporations){$scope.authentication=Authentication,$scope.create=function(){var transporation=new Transporations({name:this.name});transporation.$save(function(response){$location.path("transporations/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(transporation){if(transporation){transporation.$remove();for(var i in $scope.transporations)$scope.transporations[i]===transporation&&$scope.transporations.splice(i,1)}else $scope.transporation.$remove(function(){$location.path("transporations")})},$scope.update=function(){var transporation=$scope.transporation;transporation.$update(function(){$location.path("transporations/"+transporation._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.transporations=Transporations.query()},$scope.findOne=function(){$scope.transporation=Transporations.get({transporationId:$stateParams.transporationId})}}]),angular.module("transporations").factory("Transporations",["$resource",function($resource){return $resource("transporations/:transporationId",{transporationId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invlaid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http.delete("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);